// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lucas-clemente/quic-go/internal/handshake (interfaces: AEADWithPacketNumberCrypto)

// Package mockhandshake is a generated GoMock package.
package mockhandshake

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	protocol "github.com/lucas-clemente/quic-go/internal/protocol"
)

// MockAEADWithPacketNumberCrypto is a mock of AEADWithPacketNumberCrypto interface
type MockAEADWithPacketNumberCrypto struct {
	ctrl     *gomock.Controller
	recorder *MockAEADWithPacketNumberCryptoMockRecorder
}

// MockAEADWithPacketNumberCryptoMockRecorder is the mock recorder for MockAEADWithPacketNumberCrypto
type MockAEADWithPacketNumberCryptoMockRecorder struct {
	mock *MockAEADWithPacketNumberCrypto
}

// NewMockAEADWithPacketNumberCrypto creates a new mock instance
func NewMockAEADWithPacketNumberCrypto(ctrl *gomock.Controller) *MockAEADWithPacketNumberCrypto {
	mock := &MockAEADWithPacketNumberCrypto{ctrl: ctrl}
	mock.recorder = &MockAEADWithPacketNumberCryptoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAEADWithPacketNumberCrypto) EXPECT() *MockAEADWithPacketNumberCryptoMockRecorder {
	return m.recorder
}

// DecryptPacketNumber mocks base method
func (m *MockAEADWithPacketNumberCrypto) DecryptPacketNumber(arg0 []byte) (protocol.PacketNumber, protocol.PacketNumberLen, error) {
	ret := m.ctrl.Call(m, "DecryptPacketNumber", arg0)
	ret0, _ := ret[0].(protocol.PacketNumber)
	ret1, _ := ret[1].(protocol.PacketNumberLen)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DecryptPacketNumber indicates an expected call of DecryptPacketNumber
func (mr *MockAEADWithPacketNumberCryptoMockRecorder) DecryptPacketNumber(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptPacketNumber", reflect.TypeOf((*MockAEADWithPacketNumberCrypto)(nil).DecryptPacketNumber), arg0)
}

// EncryptPacketNumber mocks base method
func (m *MockAEADWithPacketNumberCrypto) EncryptPacketNumber(arg0 []byte, arg1 protocol.PacketNumberLen) error {
	ret := m.ctrl.Call(m, "EncryptPacketNumber", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EncryptPacketNumber indicates an expected call of EncryptPacketNumber
func (mr *MockAEADWithPacketNumberCryptoMockRecorder) EncryptPacketNumber(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptPacketNumber", reflect.TypeOf((*MockAEADWithPacketNumberCrypto)(nil).EncryptPacketNumber), arg0, arg1)
}

// Open mocks base method
func (m *MockAEADWithPacketNumberCrypto) Open(arg0, arg1 []byte, arg2 protocol.PacketNumber, arg3 []byte) ([]byte, error) {
	ret := m.ctrl.Call(m, "Open", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (mr *MockAEADWithPacketNumberCryptoMockRecorder) Open(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockAEADWithPacketNumberCrypto)(nil).Open), arg0, arg1, arg2, arg3)
}

// Overhead mocks base method
func (m *MockAEADWithPacketNumberCrypto) Overhead() int {
	ret := m.ctrl.Call(m, "Overhead")
	ret0, _ := ret[0].(int)
	return ret0
}

// Overhead indicates an expected call of Overhead
func (mr *MockAEADWithPacketNumberCryptoMockRecorder) Overhead() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Overhead", reflect.TypeOf((*MockAEADWithPacketNumberCrypto)(nil).Overhead))
}

// Seal mocks base method
func (m *MockAEADWithPacketNumberCrypto) Seal(arg0, arg1 []byte, arg2 protocol.PacketNumber, arg3 []byte) []byte {
	ret := m.ctrl.Call(m, "Seal", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Seal indicates an expected call of Seal
func (mr *MockAEADWithPacketNumberCryptoMockRecorder) Seal(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seal", reflect.TypeOf((*MockAEADWithPacketNumberCrypto)(nil).Seal), arg0, arg1, arg2, arg3)
}
